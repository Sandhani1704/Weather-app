{"version":3,"sources":["components/Weather.js","components/Cards.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","icon","className","cityName","moment","format","src","alt","description","temp","minMaxTemp","min","max","Math","round","updateLocale","russianLocale","Cards","day","getWeekDay","date","max_temp","min_temp","Form","onSubmit","getWeather","type","placeholder","name","App","React","useState","city","undefined","country","tempMax","tempMin","weatherData","setWeatherData","days","weatherDays","setWeatherDays","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","weatherIcon","setWeatherIcon","getWeatherIcon","icons","rangeId","e","a","preventDefault","location","target","elements","value","fetch","apiCall","json","response","console","log","list","slice","weatherInfo","dateToIndexMap","forEach","item","index","dt_txt","split","currentDayIndex","Object","keys","length","main","weather","id","error","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.736c2219.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport './Weather.css';\r\n\r\n\r\nconst Weather = (props) => {\r\n    const icon = `http://openweathermap.org/img/wn/${props.icon}@2x.png`;\r\n\r\n    return (\r\n        <div className='conteiner'>\r\n            { props.cityName && <p className='card__weather-time'>Сейчас {moment().format('LT')}</p>}\r\n            <div className='cards'>\r\n                <h1 className='card_city-name'>{props.cityName}</h1>\r\n                {props.cityName && <img className='weather__image' src={icon} alt={props.description}></img>}\r\n\r\n                {props.temp ? (\r\n                    <p className='weather__temp'>{props.temp}&deg;</p>\r\n                ) : null}\r\n                <p className='card__weather-description'>{props.description}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport moment from 'moment';\r\nimport russianLocale from 'moment/locale/ru'\r\nimport './Cards.css';\r\n\r\nmoment.updateLocale('ru', russianLocale);\r\n\r\n\r\nfunction minMaxTemp(min, max) {\r\n    if (max && min) {\r\n        return (\r\n            <h3 className='card__temp'>\r\n                <span className='px-4'>{Math.round(min)}&deg;</span>\r\n                <span className='px-4'>{Math.round(max)}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n}\r\n\r\nconst Cards = (props) => {\r\n    const icon = `http://openweathermap.org/img/wn/${props.day.icon}@2x.png`;\r\n    const getWeekDay = props.day.date;\r\n\r\n    return (\r\n        <div className='card-list'>\r\n            {/* <div className='card-conteiner'> */}\r\n\r\n            <p className='card__date'>{moment(getWeekDay).format('dddd')}</p>\r\n            <p className='card__date'>{moment(getWeekDay).format('MMM Do YY')}</p>\r\n\r\n            <img src={icon}></img>\r\n\r\n            {minMaxTemp(props.day.max_temp, props.day.min_temp)}\r\n\r\n            <p className='card_description'>{props.day.description}</p>\r\n            {/* </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport \"./Form.css\";\r\n\r\nfunction Form(props) {\r\n    return (\r\n        // <div className='form-conteiner conteiner h-100'>\r\n        <form className='search-form' onSubmit={props.getWeather}>\r\n            {/* <input\r\n                    type=\"text\"\r\n                    className=\"form-control col-md-3 offset-md-2\"\r\n                    placeholder=\"City\"\r\n                    name=\"city\"\r\n                    autoComplete=\"off\"\r\n                /> */}\r\n\r\n            <input\r\n                type=\"text\"\r\n                className=\"search-form__input\"\r\n                placeholder=\"City\"\r\n                name=\"city\"\r\n            // autoComplete=\"off\"\r\n            />\r\n            {/* <input\r\n                    type=\"text\"\r\n                    className=\"form-control col-md-3\"\r\n                    placeholder=\"Country\"\r\n                    name=\"country\"\r\n                    autoComplete=\"off\"\r\n                /> */}\r\n            {/* <button className=\"btn btn-warning col-md-3 mt-md-0 mt-2 text-md-left\">Get Weather</button> */}\r\n            <button className=\"search-form__button-find\">Get Weather</button>\r\n\r\n        </form>\r\n\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import './App.css';\r\nimport React from \"react\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'weather-icons/css/weather-icons.css'\r\nimport Weather from './components/Weather'\r\nimport Cards from './components/Cards'\r\nimport Form from './components/Form'\r\n\r\nconst API_KEY = '30027e883a16a558f45f7e41dda98e31';\r\n\r\nfunction App() {\r\n\r\n  const [weatherData, setWeatherData] = React.useState({\r\n    city: undefined,\r\n    country: undefined,\r\n    temp: undefined,\r\n    tempMax: undefined,\r\n    tempMin: undefined,\r\n    description: undefined,\r\n    icon: undefined,\r\n  });\r\n\r\n  const [weatherDays, setWeatherDays] = React.useState({ days: [] })\r\n\r\n  const [weatherIcon, setWeatherIcon] = React.useState({\r\n    Thunderstorm: 'wi-thunderstorm',\r\n    Drizzle: 'wi-sleet',\r\n    Rain: 'wi-storm-showers',\r\n    Snow: 'wi-snow',\r\n    Atmosphere: 'wi-fog',\r\n    Clear: 'wi-day-sunny',\r\n    Clouds: 'wi-day-fog',\r\n  });\r\n\r\n  const getWeatherIcon = (icons, rangeId) => {\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId <= 232:\r\n        setWeatherIcon({ icon: icons.Thunderstorm })\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        setWeatherIcon({ icon: icons.Drizzle })\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 531:\r\n        setWeatherIcon({ icon: icons.Rain })\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        setWeatherIcon({ icon: icons.Snow })\r\n        break;\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        setWeatherIcon({ icon: icons.Atmosphere })\r\n        break;\r\n      case rangeId === 800:\r\n        setWeatherIcon({ icon: icons.Clear })\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        setWeatherIcon({ icon: icons.Clouds })\r\n        break;\r\n      default: setWeatherIcon({ icon: icons.Clear });\r\n    }\r\n  }\r\n\r\n  // const calcCelsius = (temp) => {\r\n  //   let cell = Math.floor(temp - 273, 15)\r\n  //   return cell;\r\n  // }\r\n\r\n\r\n  const getWeather = async (e) => {\r\n    e.preventDefault()\r\n    const location = e.target.elements.city.value\r\n\r\n    if (location) {\r\n      const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&lang=ru&units=metric&APPID=${API_KEY}`)\r\n      const response = await apiCall.json()\r\n      console.log(response)\r\n      const dailyData = response.list.slice(0, 40);\r\n\r\n      // const dailyData = response.list.filter(reading => reading.dt_txt.includes(\"15:00:00\"))\r\n\r\n      // const newData = response.list.reduce((acc, item) => {\r\n      //   const day = item.dt_txt.split(' ')[0]; // Дата как ключ\r\n      //   if (!acc[day]) {  // если у нас нет такого ключа, то создаем\r\n      //     acc[day] = [];\r\n      //   }\r\n      //   acc[day].push(item.main.temp)\r\n      //   // добавляем температуру\r\n      //   // acc[day].push(item.weather[0].icon)\r\n      //   return acc\r\n      // }, {});\r\n\r\n      let weatherInfo = []\r\n      let dateToIndexMap = {}\r\n\r\n      const newData = response.list.forEach((item, index) => {\r\n        let day = item.dt_txt.split(' ')[0]; // Дата как ключ\r\n        let currentDayIndex = dateToIndexMap[day];\r\n\r\n        if (currentDayIndex == null || currentDayIndex == undefined) {\r\n          currentDayIndex = Object.keys(dateToIndexMap).length;\r\n          dateToIndexMap[day] = currentDayIndex;\r\n        }\r\n        if (weatherInfo[currentDayIndex] == null || weatherInfo[currentDayIndex] == undefined) {  // если у нас нет такого ключа, то создаем\r\n          weatherInfo[currentDayIndex] = { max_temp: -100, min_temp: 100, icon: null, date: day, description: '' }; // \r\n        }\r\n        if (weatherInfo[currentDayIndex].max_temp < item.main.temp) {\r\n          weatherInfo[currentDayIndex].max_temp = item.main.temp;\r\n        }\r\n        if (weatherInfo[currentDayIndex].min_temp > item.main.temp) {\r\n          weatherInfo[currentDayIndex].min_temp = item.main.temp;\r\n        }\r\n        if (weatherInfo[currentDayIndex].description == '') { //\r\n          weatherInfo[currentDayIndex].description = item.weather[0].description //\r\n        } //\r\n        if (item.dt_txt.split(' ')[1] === '12:00:00') {\r\n          weatherInfo[currentDayIndex].icon = item.weather[0].icon\r\n          weatherInfo[currentDayIndex].description = item.weather[0].description\r\n        } else if (weatherInfo[currentDayIndex].icon == null) {\r\n          weatherInfo[currentDayIndex].icon = item.weather[0].icon\r\n        }\r\n      });\r\n      console.log(weatherInfo)\r\n\r\n\r\n      // console.log(newData)\r\n      // const temp = [];\r\n      // for (let item in newData) {\r\n      //   const avgTemp = Math.round(newData[item].reduce((acc, cur) => {\r\n      //     return acc + cur\r\n      //   }, 0) / newData[item].length) // Складываем температуру, делим на количество элементов, округляем и добавляем в новый объект\r\n      //   temp.push({\r\n      //     day: item,\r\n      //     avgTemp: avgTemp,\r\n      //     // weather: item\r\n      //   })\r\n      // }\r\n\r\n      // console.log(temp)\r\n\r\n      getWeatherIcon(weatherIcon, response.list[0].weather[0].id)\r\n\r\n      setWeatherDays({ days: weatherInfo })\r\n\r\n\r\n      setWeatherData({\r\n        city: `${response.city.name}, ${response.city.country}`,\r\n        country: response.city.country,\r\n        temp: Math.round(response.list[0].main.temp),\r\n        description: response.list[0].weather[0].description,\r\n        icon: response.list[0].weather[0].icon\r\n      });\r\n    } else console.error();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='App__image'>\r\n        <Form getWeather={getWeather} />\r\n        <Weather\r\n          cityName={weatherData.city}\r\n          country={weatherData.country}\r\n          temp={weatherData.temp}\r\n          tempMax={weatherData.tempMax}\r\n          tempMin={weatherData.tempMin}\r\n          description={weatherData.description}\r\n          //icon={weatherIcon.icon}\r\n          icon={weatherData.icon}\r\n        />\r\n\r\n        <div className='conteiner-cards'>\r\n          {weatherDays.days.map((day, i) => <Cards day={day} key={i} />)}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}