[{"C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\index.js":"1","C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\App.js":"2","C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\components\\Form.js":"3","C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\reportWebVitals.js":"4"},{"size":517,"mtime":1607203865716,"results":"5","hashOfConfig":"6"},{"size":6243,"mtime":1611600971677,"results":"7","hashOfConfig":"6"},{"size":1214,"mtime":1611599021448,"results":"8","hashOfConfig":"6"},{"size":375,"mtime":1607203865717,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9gs2oc",{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\index.js",[],"C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\App.js",["20","21","22","23","24"],"import './App.css';\r\nimport React from \"react\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'weather-icons/css/weather-icons.css'\r\nimport Weather from './components/Weather'\r\nimport Cards from './components/Cards'\r\nimport Form from './components/Form'\r\n\r\nconst API_KEY = '30027e883a16a558f45f7e41dda98e31';\r\n\r\nfunction App() {\r\n\r\n  const [weatherData, setWeatherData] = React.useState({\r\n    city: undefined,\r\n    country: undefined,\r\n    temp: undefined,\r\n    tempMax: undefined,\r\n    tempMin: undefined,\r\n    description: undefined,\r\n    icon: undefined,\r\n  });\r\n\r\n  const [weatherDays, setWeatherDays] = React.useState({ days: [] })\r\n\r\n  const [weatherIcon, setWeatherIcon] = React.useState({\r\n    Thunderstorm: 'wi-thunderstorm',\r\n    Drizzle: 'wi-sleet',\r\n    Rain: 'wi-storm-showers',\r\n    Snow: 'wi-snow',\r\n    Atmosphere: 'wi-fog',\r\n    Clear: 'wi-day-sunny',\r\n    Clouds: 'wi-day-fog',\r\n  });\r\n\r\n  const getWeatherIcon = (icons, rangeId) => {\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId <= 232:\r\n        setWeatherIcon({ icon: icons.Thunderstorm })\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        setWeatherIcon({ icon: icons.Drizzle })\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 531:\r\n        setWeatherIcon({ icon: icons.Rain })\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        setWeatherIcon({ icon: icons.Snow })\r\n        break;\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        setWeatherIcon({ icon: icons.Atmosphere })\r\n        break;\r\n      case rangeId === 800:\r\n        setWeatherIcon({ icon: icons.Clear })\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        setWeatherIcon({ icon: icons.Clouds })\r\n        break;\r\n      default: setWeatherIcon({ icon: icons.Clear });\r\n    }\r\n  }\r\n\r\n  // const calcCelsius = (temp) => {\r\n  //   let cell = Math.floor(temp - 273, 15)\r\n  //   return cell;\r\n  // }\r\n\r\n\r\n  const getWeather = async (e) => {\r\n    e.preventDefault()\r\n    const location = e.target.elements.city.value\r\n\r\n    if (location) {\r\n      const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&lang=ru&units=metric&APPID=${API_KEY}`)\r\n      const response = await apiCall.json()\r\n      console.log(response)\r\n      const dailyData = response.list.slice(0, 40);\r\n\r\n      // const dailyData = response.list.filter(reading => reading.dt_txt.includes(\"15:00:00\"))\r\n\r\n      // const newData = response.list.reduce((acc, item) => {\r\n      //   const day = item.dt_txt.split(' ')[0]; // Дата как ключ\r\n      //   if (!acc[day]) {  // если у нас нет такого ключа, то создаем\r\n      //     acc[day] = [];\r\n      //   }\r\n      //   acc[day].push(item.main.temp)\r\n      //   // добавляем температуру\r\n      //   // acc[day].push(item.weather[0].icon)\r\n      //   return acc\r\n      // }, {});\r\n\r\n      let weatherInfo = []\r\n      let dateToIndexMap = {}\r\n\r\n      const newData = response.list.forEach((item, index) => {\r\n        let day = item.dt_txt.split(' ')[0]; // Дата как ключ\r\n        let currentDayIndex = dateToIndexMap[day];\r\n\r\n        if (currentDayIndex == null || currentDayIndex == undefined) {\r\n          currentDayIndex = Object.keys(dateToIndexMap).length;\r\n          dateToIndexMap[day] = currentDayIndex;\r\n        }\r\n        if (weatherInfo[currentDayIndex] == null || weatherInfo[currentDayIndex] == undefined) {  // если у нас нет такого ключа, то создаем\r\n          weatherInfo[currentDayIndex] = { max_temp: -100, min_temp: 100, icon: null, date: day, description: '' }; // \r\n        }\r\n        if (weatherInfo[currentDayIndex].max_temp < item.main.temp) {\r\n          weatherInfo[currentDayIndex].max_temp = item.main.temp;\r\n        }\r\n        if (weatherInfo[currentDayIndex].min_temp > item.main.temp) {\r\n          weatherInfo[currentDayIndex].min_temp = item.main.temp;\r\n        }\r\n        if (weatherInfo[currentDayIndex].description == '') { //\r\n          weatherInfo[currentDayIndex].description = item.weather[0].description //\r\n        } //\r\n        if (item.dt_txt.split(' ')[1] === '12:00:00') {\r\n          weatherInfo[currentDayIndex].icon = item.weather[0].icon\r\n          weatherInfo[currentDayIndex].description = item.weather[0].description\r\n        } else if (weatherInfo[currentDayIndex].icon == null) {\r\n          weatherInfo[currentDayIndex].icon = item.weather[0].icon\r\n        }\r\n      });\r\n      console.log(weatherInfo)\r\n\r\n\r\n      // console.log(newData)\r\n      // const temp = [];\r\n      // for (let item in newData) {\r\n      //   const avgTemp = Math.round(newData[item].reduce((acc, cur) => {\r\n      //     return acc + cur\r\n      //   }, 0) / newData[item].length) // Складываем температуру, делим на количество элементов, округляем и добавляем в новый объект\r\n      //   temp.push({\r\n      //     day: item,\r\n      //     avgTemp: avgTemp,\r\n      //     // weather: item\r\n      //   })\r\n      // }\r\n\r\n      // console.log(temp)\r\n\r\n      getWeatherIcon(weatherIcon, response.list[0].weather[0].id)\r\n\r\n      setWeatherDays({ days: weatherInfo })\r\n\r\n\r\n      setWeatherData({\r\n        city: `${response.city.name}, ${response.city.country}`,\r\n        country: response.city.country,\r\n        temp: Math.round(response.list[0].main.temp),\r\n        description: response.list[0].weather[0].description,\r\n        icon: response.list[0].weather[0].icon\r\n      });\r\n    } else console.error();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='App__image'>\r\n        <Form getWeather={getWeather} />\r\n        <Weather\r\n          cityName={weatherData.city}\r\n          country={weatherData.country}\r\n          temp={weatherData.temp}\r\n          tempMax={weatherData.tempMax}\r\n          tempMin={weatherData.tempMin}\r\n          description={weatherData.description}\r\n          //icon={weatherIcon.icon}\r\n          icon={weatherData.icon}\r\n        />\r\n\r\n        <div className='conteiner-cards'>\r\n          {weatherDays.days.map((day, i) => <Cards day={day} key={i} />)}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["25","26"],"C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\components\\Form.js",[],"C:\\Users\\Дом.USER-PC\\Desktop\\Яндекс.Практикум\\weather-app\\src\\reportWebVitals.js",[],{"ruleId":"27","severity":1,"message":"28","line":76,"column":13,"nodeType":"29","messageId":"30","endLine":76,"endColumn":22},{"ruleId":"27","severity":1,"message":"31","line":94,"column":13,"nodeType":"29","messageId":"30","endLine":94,"endColumn":20},{"ruleId":"32","severity":1,"message":"33","line":98,"column":56,"nodeType":"34","messageId":"35","endLine":98,"endColumn":58},{"ruleId":"32","severity":1,"message":"33","line":102,"column":82,"nodeType":"34","messageId":"35","endLine":102,"endColumn":84},{"ruleId":"32","severity":1,"message":"33","line":111,"column":54,"nodeType":"34","messageId":"35","endLine":111,"endColumn":56},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},"no-unused-vars","'dailyData' is assigned a value but never used.","Identifier","unusedVar","'newData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-global-assign","no-unsafe-negation"]